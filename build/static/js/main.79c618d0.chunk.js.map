{"version":3,"sources":["services/persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","person","post","id","changedPerson","put","delete","status","Notification","message","type","className","Filter","value","handleChange","onChange","PersonForm","newName","handleNameChange","newNumber","handleNumberChange","handleSubmit","onSubmit","Persons","persons","deletePersonOf","map","deletePerson","name","Person","number","onClick","App","useState","setPersons","setNewName","setNewNumber","nameFilter","setNameFilter","successfulMessage","setSuccessfulMessage","errorMessage","setErrorMessage","useEffect","personService","initialPersons","filteredPersons","filter","toUpperCase","includes","event","target","preventDefault","some","window","confirm","find","returnedPerson","concat","setTimeout","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79c618d0.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = person => {\n    const request = axios.post(baseUrl, person)\n    return request.then(response => response.data)\n}\n\nconst update = (id, changedPerson) => {\n    const request = axios.put(`${baseUrl}/${id}`, changedPerson)\n    return request.then(response => response.data)\n}\n\nconst remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.status)\n}\n\nexport default { getAll, create, update, remove }","import React from 'react'\n\nconst Notification = ({ message, type }) => {\n    if (message === null) {\n        return null\n    }\n\n    const className = type === 'success' ? 'successful' : 'error'\n    return (\n        <div className={className}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nconst Filter = ({ value, handleChange }) => <div>filter shown with <input value={value} onChange={handleChange} /></div>\n\nconst PersonForm = ({ newName, handleNameChange, newNumber, handleNumberChange, handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        name: <input value={newName} onChange={handleNameChange} />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={handleNumberChange} /></div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>)\n}\n\nconst Persons = ({ persons, deletePersonOf }) => persons.map(person => <Person key={person.name} person={person} deletePerson={() => deletePersonOf(person.id)} />)\n\nconst Person = ({ person, deletePerson }) => <div>{person.name} {person.number} <button onClick={deletePerson}>delete</button></div>\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [nameFilter, setNameFilter] = useState('')\n  const [successfulMessage, setSuccessfulMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const addName = (event) => {\n    event.preventDefault()\n\n    const nameAlreadyAdded = persons.some((person) => person.name === newName)\n\n    if (nameAlreadyAdded) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const person = persons.find(person => person.name === newName)\n        const changedPerson = { ...person, number: newNumber }\n\n        personService\n          .update(person.id, changedPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== returnedPerson.id ? person : returnedPerson))\n\n            setNewName('')\n            setNewNumber('')\n          })\n      }\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n\n          setNewName('')\n          setNewNumber('')\n\n          setSuccessfulMessage(`Added ${returnedPerson.name}`)\n          setTimeout(() => {\n            setSuccessfulMessage(null)\n          }, 3000)\n        })\n    }\n  }\n\n  const deletePersonOf = (id) => {\n    const { name } = persons.find(person => person.id === id)\n    if (window.confirm(`delete ${name}?`)) {\n      personService\n        .remove(id)\n        .then(status => {\n          if (status === 204) {\n            setPersons(persons.filter(person => person.id !== id))\n          }\n        })\n        .catch(error => {\n          setErrorMessage(`information of ${name} has already been removed from server`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 3000)\n          setPersons(persons.filter(person => person.id !== id))\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNameFilterChange = (event) => {\n    setNameFilter(event.target.value)\n  }\n\n  const filteredPersons = persons.filter((person) => person.name.toUpperCase().includes(nameFilter.toUpperCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification type='success' message={successfulMessage} />\n      <Notification type='error' message={errorMessage} />\n      <Filter value={nameFilter} handleChange={handleNameFilterChange} />\n      <h3>add a new</h3>\n      <PersonForm newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} handleSubmit={addName} />\n      <h3>Numbers</h3>\n      <Persons persons={filteredPersons} deletePersonOf={(id) => deletePersonOf(id)} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}